image: ${CI_REGISTRY}/ston-fi/docker/rust-build:20.10.24_1.80.0-e242770b 

# Prevent duplicate pipelines, branch pipeline and merge_request pipeline
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH || $CI_COMMIT_TAG'

stages:
  - test

variables:
  FF_USE_FASTZIP: 1
  CACHE_COMPRESSION_LEVEL: "fastest"
  CARGO_HOME: "${CI_PROJECT_DIR}/.cargo"
  RUSTFLAGS: "-D warnings -C target-cpu=znver2"
  TARGET_CPU_MARCH: "znver2"


.snippets:
  check-cache:
    # cleanup cache if it's too big. 4GB cache takes 1min to download/upload. Build from scratch takes about 2.5min.
    # so take about 6GB as a limit
    - if [ $(du -sc target/ .cargo/ | tail -n 1 | awk '{print $1}') -gt 6000000 ]; then rm -rf target .cargo; fi

test:
  stage: test
  before_script:
    - !reference [.snippets, check-cache]
  script:
    - cargo fmt --check
    - cargo +nigntly fmt --check
    - cargo clippy --release   
    - cargo clippy --features "state_cache" --release
    - cargo clippy --features "emulate_get_method" --release
 
    - cargo build --release
    - cargo build --release --features "state_cache"
    - cargo build --release --features "emulate_get_method"
    - cargo test --release --package tonlib-core
    - cargo test --release --doc
    - cargo test --release --lib
    - cargo test --release --lib --features "state_cache"
    - cargo test --release --lib --features "emulate_get_method"
  cache:
    key: cache-$CI_COMMIT_REF_SLUG
    fallback_keys: [ cache-$CI_DEFAULT_BRANCH ]
    paths: [ .cargo, target ]
    policy: pull-push
  tags:
    - zen4
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != 'merge_request_event'
  interruptible: true

integration_test:
  stage: test
  before_script:
    - !reference [.snippets, check-cache]
  script:
    - cargo install cargo-nextest
    - cargo nextest run --release  
    - cargo nextest run --release --features "state_cache"
    - cargo nextest run --release --features "emulate_get_method"
  tags:
    - zen4
  when: manual
  cache:
    key: cache-$CI_COMMIT_REF_SLUG
    fallback_keys: [ cache-$CI_DEFAULT_BRANCH ]
    paths: [ .cargo, target ]
    policy: pull
  interruptible: true

test-mr:
  tags:
    - zen4
  stage: test
  before_script:
    - !reference [.snippets, check-cache]
  script:
    - cargo fmt --check
    - cargo clippy --release --no-default-features
    - cargo build --release --no-default-features
    - cargo test --release --lib --no-default-features
    - cargo clippy --release --all-features
    - cargo build --release --all-features
    - cargo test --release --lib --all-features

  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  cache:
    key: cache-$CI_COMMIT_REF_SLUG
    fallback_keys: [ cache-$CI_DEFAULT_BRANCH ]
    paths: [ .cargo, target ]
    policy: pull
  interruptible: true

test-master:
  tags:
    - zen4
  stage: test
  before_script:
    - !reference [ .snippets, check-cache ]
  script:
    - cargo fmt --check
    - cargo build --release --all-features
    - cargo test --release --lib --all-features
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  cache:
    key: cache-$CI_COMMIT_REF_SLUG
    fallback_keys: [ cache-$CI_DEFAULT_BRANCH ]
    paths: [ .cargo, target ]
    policy: pull-push
  interruptible: true
